// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String   // Hashed with bcrypt
  firstName   String?
  lastName    String?
  phone       String?
  isActive    Boolean  @default(true)
  isAdmin     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  addresses   Address[]
  orders      Order[]
  reviews     Review[]
  cartItems   CartItem[]
  
  @@map("users")
}

// Address Management
model Address {
  id          String      @id @default(cuid())
  userId      String
  type        AddressType // BILLING, SHIPPING
  firstName   String
  lastName    String
  company     String?
  street1     String
  street2     String?
  city        String
  state       String
  postalCode  String
  country     String
  isDefault   Boolean     @default(false)
  
  // Relationships
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders      Order[]
  
  @@map("addresses")
}

// Product Catalog
model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  parentId    String?
  isActive    Boolean   @default(true)
  sortOrder   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relationships
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]
  
  @@map("categories")
}

model Product {
  id                String    @id @default(cuid())
  name              String
  slug              String    @unique
  description       String?
  shortDesc         String?
  sku               String    @unique
  price             Decimal   @db.Decimal(10,2)
  comparePrice      Decimal?  @db.Decimal(10,2)
  costPrice         Decimal?  @db.Decimal(10,2)
  trackInventory    Boolean   @default(true)
  inventoryQty      Int       @default(0)
  lowStockThreshold Int       @default(5)
  weight            Decimal?  @db.Decimal(8,2)
  dimensions        Json?     // {length, width, height}
  isActive          Boolean   @default(true)
  isFeatured        Boolean   @default(false)
  tags              String[]
  metaTitle         String?
  metaDesc          String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relationships
  categoryId        String
  category          Category        @relation(fields: [categoryId], references: [id])
  images            ProductImage[]
  variants          ProductVariant[]
  reviews           Review[]
  cartItems         CartItem[]
  orderItems        OrderItem[]
  
  @@map("products")
}

model ProductImage {
  id          String  @id @default(cuid())
  productId   String
  url         String
  altText     String?
  sortOrder   Int     @default(0)
  
  // Relationships
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@map("product_images")
}

model ProductVariant {
  id          String  @id @default(cuid())
  productId   String
  name        String  // e.g., "Size: Large, Color: Red"
  sku         String  @unique
  price       Decimal @db.Decimal(10,2)
  inventoryQty Int    @default(0)
  attributes  Json    // {size: "L", color: "red"}
  isActive    Boolean @default(true)
  
  // Relationships
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  cartItems   CartItem[]
  orderItems  OrderItem[]
  
  @@map("product_variants")
}

// Shopping Cart
model CartItem {
  id          String   @id @default(cuid())
  userId      String?  // Null for guest carts
  sessionId   String?  // For guest users
  productId   String
  variantId   String?
  quantity    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  user        User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  product     Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant     ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)
  
  @@unique([userId, productId, variantId])
  @@unique([sessionId, productId, variantId])
  @@map("cart_items")
}

// Order Management
model Order {
  id                String            @id @default(cuid())
  orderNumber       String            @unique
  userId            String?
  email             String
  status            OrderStatus       @default(PENDING)
  paymentStatus     PaymentStatus     @default(PENDING)
  fulfillmentStatus FulfillmentStatus @default(UNFULFILLED)
  
  // Pricing
  subtotal        Decimal     @db.Decimal(10,2)
  taxAmount       Decimal     @db.Decimal(10,2)
  shippingAmount  Decimal     @db.Decimal(10,2)
  discountAmount  Decimal     @db.Decimal(10,2) @default(0)
  totalAmount     Decimal     @db.Decimal(10,2)
  
  // Addresses
  shippingAddressId String?
  billingAddressId  String?
  
  // Metadata
  currency        String      @default("USD")
  notes           String?
  cancelReason    String?
  cancelledAt     DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Relationships
  user            User?       @relation(fields: [userId], references: [id])
  shippingAddress Address?    @relation(fields: [shippingAddressId], references: [id])
  items           OrderItem[]
  payments        Payment[]
  
  @@map("orders")
}

model OrderItem {
  id          String  @id @default(cuid())
  orderId     String
  productId   String
  variantId   String?
  quantity    Int
  unitPrice   Decimal @db.Decimal(10,2)
  totalPrice  Decimal @db.Decimal(10,2)
  
  // Product snapshot at time of order
  productName String
  productSku  String
  variantName String?
  
  // Relationships
  order       Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product         @relation(fields: [productId], references: [id])
  variant     ProductVariant? @relation(fields: [variantId], references: [id])
  
  @@map("order_items")
}

// Payment Processing
model Payment {
  id              String        @id @default(cuid())
  orderId         String
  paymentIntentId String        @unique // Stripe Payment Intent ID
  amount          Decimal       @db.Decimal(10,2)
  currency        String        @default("USD")
  status          PaymentStatus @default(PENDING)
  paymentMethod   PaymentMethod
  metadata        Json?         // Stripe metadata
  failureReason   String?
  processedAt     DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relationships
  order           Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  @@map("payments")
}

// Customer Reviews
model Review {
  id          String   @id @default(cuid())
  productId   String
  userId      String
  rating      Int      // 1-5 stars
  title       String?
  comment     String?
  isVerified  Boolean  @default(false) // Verified purchase
  isApproved  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([productId, userId]) // One review per user per product
  @@map("reviews")
}

// Enums
enum AddressType {
  BILLING
  SHIPPING
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  CANCELLED
  REFUNDED
}

enum FulfillmentStatus {
  UNFULFILLED
  PARTIAL
  FULFILLED
  SHIPPED
  DELIVERED
}

enum PaymentMethod {
  CARD
  PAYPAL
  APPLE_PAY
  GOOGLE_PAY
  BANK_TRANSFER
}
